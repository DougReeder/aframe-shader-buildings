(()=>{var o={227:o=>{o.exports="\nconst float PI = 3.1415926535897932384626433832795;\n\nuniform float elevation;\nuniform float xProportion;\nuniform float zProportion;\nuniform float yProportion;\nuniform float windowWidth;\nuniform float windowHeight;\nuniform bool useWallMap;\nuniform sampler2D wallMap;\nuniform float wallZoom;\nuniform vec3 wallColor;\nuniform vec3 windowColor;\n\nvarying vec3 pos;\nvarying float sunFactor;\nvarying float vIntensityTweak;\n// vIntensityTweak > 0: 1.0 is no change to wall color\n// vIntensityTweak <= 0: 0.0 is black, 1.0 is white\n\nvoid main() {\n    float xx1 = step(windowWidth, sin(pos.x * 2.0 * PI / xProportion - PI / 2.0));\n    float xx2 = step(0.8, sin(pos.z * 2.0 * PI / zProportion + PI / 2.0));\n\n    float zz1 = step(windowWidth, sin(pos.z * 2.0 * PI / zProportion - PI / 2.0));\n    float zz2 = step(0.8, sin(pos.x * 2.0 * PI / xProportion + PI / 2.0));\n\n    float yy1 = step(windowHeight, sin((pos.y - elevation) * 2.0 * PI / yProportion - 2.0));\n\n    vec3 wallPixelColor = useWallMap ?\n        texture2D(wallMap, vec2((pos.x+pos.z)/wallZoom, pos.y/wallZoom)).rgb :\n        wallColor;\n    vec3 inherentColor = vIntensityTweak > 0.0 ?\n        mix(wallPixelColor, windowColor, (xx1 * xx2 + zz1 * zz2) * yy1) :\n        vec3(-1.0);  // will be multiplied by negative vIntensityTweak\n    vec3 tweakedColor = inherentColor * vec3(vIntensityTweak);\n\n    gl_FragColor = vec4(tweakedColor * sunFactor, 1.0);\n}\n"},106:o=>{o.exports="\nuniform vec3 sunNormal;\n\nattribute float intensityTweak;\n\nvarying vec3 pos;\nvarying float sunFactor;\nvarying float vIntensityTweak;\n\nvoid main() {\n  pos = position;\n\n  sunFactor = 0.5 + max(dot(normal, sunNormal), 0.0);\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n  vIntensityTweak = intensityTweak;\n}\n"}},e={};function t(n){var r=e[n];if(void 0!==r)return r.exports;var i=e[n]={exports:{}};return o[n](i,i.exports,t),i.exports}t.n=o=>{var e=o&&o.__esModule?()=>o.default:()=>o;return t.d(e,{a:e}),e},t.d=(o,e)=>{for(var n in e)t.o(e,n)&&!t.o(o,n)&&Object.defineProperty(o,n,{enumerable:!0,get:e[n]})},t.o=(o,e)=>Object.prototype.hasOwnProperty.call(o,e),(()=>{"use strict";var o=t(106),e=t.n(o),n=t(227),r=t.n(n);AFRAME.registerShader("buildings",{schema:{elevation:{type:"number",default:0},xProportion:{type:"number",default:5},zProportion:{type:"number",default:5},yProportion:{type:"number",default:4},windowWidth:{type:"number",default:0,min:-1,max:1},windowHeight:{type:"number",default:-.4,min:-1,max:1},wallSrc:{type:"selector"},wallZoom:{type:"number",default:2,min:.001},wallColor:{type:"color",default:"#909090"},windowColor:{type:"color",default:"#181818"},sunPosition:{type:"vec3",default:{x:-1,y:1,z:-1}}},init:function(o){const t=new THREE.Vector3(o.sunPosition.x,o.sunPosition.y,o.sunPosition.z),n={elevation:{value:o.elevation},xProportion:{value:o.xProportion},zProportion:{value:o.zProportion},yProportion:{value:o.yProportion},windowWidth:{value:-o.windowWidth},windowHeight:{value:-o.windowHeight},useWallMap:{value:!1},wallMap:{value:null},wallZoom:{value:o.wallZoom},wallColor:{value:new THREE.Color(o.wallColor)},windowColor:{value:new THREE.Color(o.windowColor)},sunNormal:{value:t.normalize()}};this.material=new THREE.ShaderMaterial({uniforms:n,vertexShader:e(),fragmentShader:r()})},update:function(o){this.material.uniforms.elevation.value=o.elevation,this.material.uniforms.xProportion.value=o.xProportion,this.material.uniforms.zProportion.value=o.zProportion,this.material.uniforms.yProportion.value=o.yProportion,this.material.uniforms.windowWidth.value=-o.windowWidth,this.material.uniforms.windowHeight.value=-o.windowHeight,this.material.uniforms.wallZoom.value=o.wallZoom,this.material.uniforms.wallColor.value.set(o.wallColor),this.material.uniforms.windowColor.value.set(o.windowColor);let e=new THREE.Vector3(o.sunPosition.x,o.sunPosition.y,o.sunPosition.z);this.material.uniforms.sunNormal.value=e.normalize(),o.wallSrc!==this.wallSrc&&(this.loadTexture(o.wallSrc),this.wallSrc=o.wallSrc)},loadTexture:function(o){o?.currentSrc&&(this.wallTexture=null,this.textureLoader=new THREE.TextureLoader,this.textureLoader.load(o.currentSrc,(o=>{this.material.uniforms.wallMap.value=this.wallTexture=o,o.wrapS=THREE.RepeatWrapping,o.wrapT=THREE.RepeatWrapping,o.repeat.set(2,3),o.magFilfer=THREE.LinearMipmapNearestFilter,o.minFilfer=THREE.LinearMipmapNearestFilter,this.material.uniforms.useWallMap.value=!0})))}}),AFRAME.registerGeometry("ell",{schema:{elevation:{type:"number",default:0},xProportion:{type:"number",default:5,min:1},zProportion:{type:"number",default:5,min:1},yProportion:{type:"number",default:4,min:2},buildings:{type:"string",default:"[{}]"}},init:function(o){const e=JSON.parse(o.buildings),t=30,n=90,r=new Float32Array(e.length*n),i=new Float32Array(e.length*n),a=[],l=new Float32Array(e.length*t);for(let s=0;s<e.length;++s){let u=e[s].x||0,m=e[s].z||0,p=o.elevation+(e[s].y||0),w=Math.max(e[s].xCoreSections||2,1),d=Math.max(e[s].xWingSections||0,0),f=Math.max(e[s].zCoreSections||2,1),y=Math.max(e[s].zWingSections||0,0),h=w*o.xProportion,v=d*o.xProportion,c=f*o.zProportion,g=y*o.zProportion,x=p+(e[s].ySections||1)*o.yProportion;r.set([u,p,m],s*n+0),r.set([u+v,p,m],s*n+3),r.set([u+v,x,m],s*n+6),r.set([u,x,m],s*n+9),i.set([0,0,1,0,0,1,0,0,1,0,0,1],s*n+0),a.push(s*t+0,s*t+1,s*t+2,s*t+2,s*t+3,s*t+0),r.set([u+v,p,m],s*n+12),r.set([u+v,p,m-c],s*n+15),r.set([u+v,x,m-c],s*n+18),r.set([u+v,x,m],s*n+21),i.set([1,0,0,1,0,0,1,0,0,1,0,0],s*n+12),a.push(s*t+4,s*t+5,s*t+6,s*t+6,s*t+7,s*t+4),r.set([u+v,p,m-c],s*n+24),r.set([u-h,p,m-c],s*n+27),r.set([u-h,x,m-c],s*n+30),r.set([u+v,x,m-c],s*n+33),i.set([0,0,-1,0,0,-1,0,0,-1,0,0,-1],s*n+24),a.push(s*t+8,s*t+9,s*t+10,s*t+10,s*t+11,s*t+8),r.set([u-h,p,m-c],s*n+36),r.set([u-h,p,m+g],s*n+39),r.set([u-h,x,m+g],s*n+42),r.set([u-h,x,m-c],s*n+45),i.set([-1,0,0,-1,0,0,-1,0,0,-1,0,0],s*n+36),a.push(s*t+12,s*t+13,s*t+14,s*t+14,s*t+15,s*t+12),r.set([u-h,p,m+g],s*n+48),r.set([u,p,m+g],s*n+51),r.set([u,x,m+g],s*n+54),r.set([u-h,x,m+g],s*n+57),i.set([0,0,1,0,0,1,0,0,1,0,0,1],s*n+48),a.push(s*t+16,s*t+17,s*t+18,s*t+18,s*t+19,s*t+16),r.set([u,p,m+g],s*n+60),r.set([u,p,m],s*n+63),r.set([u,x,m],s*n+66),r.set([u,x,m+g],s*n+69),i.set([1,0,0,1,0,0,1,0,0,1,0,0],s*n+60),a.push(s*t+20,s*t+21,s*t+22,s*t+22,s*t+23,s*t+20);const P=.5+Math.random()/2;for(let o=s*t;o<s*t+24;++o)l[o]=P+Math.random()/2;0===y&&(l[s*t+17]=l[s*t],l[s*t+18]=l[s*t+3]),0===d&&(l[s*t+21]=l[s*t+4],l[s*t+22]=l[s*t+7]),r.set([u,x,m],s*n+72),r.set([u+v,x,m],s*n+75),r.set([u+v,x,m-c],s*n+78),r.set([u-h,x,m-c],s*n+81),r.set([u-h,x,m+g],s*n+84),r.set([u,x,m+g],s*n+87),i.set([0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0],s*n+72),a.push(s*t+24,s*t+25,s*t+26,s*t+26,s*t+27,s*t+24,s*t+27,s*t+28,s*t+24,s*t+28,s*t+29,s*t+24);const z=Math.random()/3;for(let o=s*t+24;o<(s+1)*t;++o)l[o]=-(z+Math.random()/8)}this.geometry=new THREE.BufferGeometry,this.geometry.setAttribute("position",new THREE.BufferAttribute(r,3)),this.geometry.setAttribute("normal",new THREE.BufferAttribute(i,3)),this.geometry.setIndex(a),this.geometry.setAttribute("intensityTweak",new THREE.BufferAttribute(l,1)),this.geometry.computeBoundingBox()}}),AFRAME.registerPrimitive("a-shader-buildings",{defaultComponents:{geometry:{primitive:"ell",buildings:[]},material:{shader:"buildings"}},mappings:{"elevation-geometry":"geometry.elevation","x-proportion-geometry":"geometry.xProportion","z-proportion-geometry":"geometry.zProportion","y-proportion-geometry":"geometry.yProportion",buildings:"geometry.buildings","elevation-material":"material.elevation","x-proportion-material":"material.xProportion","z-proportion-material":"material.zProportion","y-proportion-material":"material.yProportion","window-width":"material.windowWidth","window-height":"material.windowHeight","wall-src":"material.wallSrc","wall-zoom":"material.wallZoom","wall-color":"material.wallColor","window-color":"material.windowColor","sun-position":"material.sunPosition"}})})()})();