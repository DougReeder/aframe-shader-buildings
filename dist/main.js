(()=>{var o={227:o=>{o.exports="\nconst float PI = 3.1415926535897932384626433832795;\n\nuniform float elevation;\nuniform float xProportion;\nuniform float zProportion;\nuniform float yProportion;\nuniform float windowWidth;\nuniform float windowHeight;\nuniform bool useWallMap;\nuniform sampler2D wallMap;\nuniform float wallZoom;\nuniform vec3 wallColor;\nuniform vec3 windowColor;\n\nvarying vec3 pos;\nvarying float sunFactor;\n\nvoid main() {\n    float xx1 = step(windowWidth, sin(pos.x * 2.0 * PI / xProportion - PI / 2.0));\n    float xx2 = step(0.8, sin(pos.z * 2.0 * PI / zProportion + PI / 2.0));\n\n    float zz1 = step(windowWidth, sin(pos.z * 2.0 * PI / zProportion - PI / 2.0));\n    float zz2 = step(0.8, sin(pos.x * 2.0 * PI / xProportion + PI / 2.0));\n\n    float yy1 = step(windowHeight, sin((pos.y - elevation) * 2.0 * PI / yProportion - 2.0));\n\n    vec3 wallPixelColor = useWallMap ?\n        texture2D(wallMap, vec2((pos.x+pos.z)/wallZoom, pos.y/wallZoom)).rgb :\n        wallColor;\n    vec3 inherentColor = mix(wallPixelColor, windowColor, (xx1 * xx2 + zz1 * zz2) * yy1);\n\n    gl_FragColor = vec4(inherentColor * sunFactor, 1.0);\n}\n"},106:o=>{o.exports="\nuniform vec3 sunNormal;\n\nvarying vec3 pos;\nvarying float sunFactor;\n\nvoid main() {\n  pos = position;\n\n  sunFactor = 0.5 + max(dot(normal, sunNormal), 0.0);\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n"}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var n=e[r]={exports:{}};return o[r](n,n.exports,t),n.exports}t.n=o=>{var e=o&&o.__esModule?()=>o.default:()=>o;return t.d(e,{a:e}),e},t.d=(o,e)=>{for(var r in e)t.o(e,r)&&!t.o(o,r)&&Object.defineProperty(o,r,{enumerable:!0,get:e[r]})},t.o=(o,e)=>Object.prototype.hasOwnProperty.call(o,e),(()=>{"use strict";var o=t(106),e=t.n(o),r=t(227),i=t.n(r);AFRAME.registerShader("buildings",{schema:{elevation:{type:"number",default:0},xProportion:{type:"number",default:5},zProportion:{type:"number",default:5},yProportion:{type:"number",default:4},windowWidth:{type:"number",default:0,min:-1,max:1},windowHeight:{type:"number",default:-.4,min:-1,max:1},wallMap:{type:"map"},wallZoom:{type:"number",default:2,min:.001},wallColor:{type:"color",default:"#909090"},windowColor:{type:"color",default:"#181818"},sunPosition:{type:"vec3",default:{x:-1,y:1,z:-1}}},init:function(o){const t=new THREE.Vector3(o.sunPosition.x,o.sunPosition.y,o.sunPosition.z),r={elevation:{value:o.elevation},xProportion:{value:o.xProportion},zProportion:{value:o.zProportion},yProportion:{value:o.yProportion},windowWidth:{value:-o.windowWidth},windowHeight:{value:-o.windowHeight},useWallMap:{value:!1},wallMap:{value:null},wallZoom:{value:o.wallZoom},wallColor:{value:new THREE.Color(o.wallColor)},windowColor:{value:new THREE.Color(o.windowColor)},sunNormal:{value:t.normalize()}};this.material=new THREE.ShaderMaterial({uniforms:r,vertexShader:e(),fragmentShader:i()})},update:function(o){this.material.uniforms.elevation.value=o.elevation,this.material.uniforms.xProportion.value=o.xProportion,this.material.uniforms.zProportion.value=o.zProportion,this.material.uniforms.yProportion.value=o.yProportion,this.material.uniforms.windowWidth.value=-o.windowWidth,this.material.uniforms.windowHeight.value=-o.windowHeight,this.material.uniforms.wallZoom.value=o.wallZoom,this.material.uniforms.wallColor.value.set(o.wallColor),this.material.uniforms.windowColor.value.set(o.windowColor);let e=new THREE.Vector3(o.sunPosition.x,o.sunPosition.y,o.sunPosition.z);this.material.uniforms.sunNormal.value=e.normalize(),o.wallSrc!==this.wallSrc&&(this.loadTexture(o.wallSrc),this.wallSrc=o.wallSrc)},loadTexture:function(o){const e=document.querySelector(o);e?.currentSrc&&(this.wallTexture=null,this.textureLoader=new THREE.TextureLoader,this.textureLoader.load(e.currentSrc,(o=>{this.material.uniforms.wallMap.value=this.wallTexture=o,o.wrapS=THREE.RepeatWrapping,o.wrapT=THREE.RepeatWrapping,o.repeat.set(2,3),o.magFilfer=THREE.LinearMipmapNearestFilter,o.minFilfer=THREE.LinearMipmapNearestFilter,this.material.uniforms.useWallMap.value=!0})))}}),AFRAME.registerGeometry("ell",{schema:{elevation:{type:"number",default:0},xProportion:{type:"number",default:5,min:1},zProportion:{type:"number",default:5,min:1},yProportion:{type:"number",default:4,min:2},buildings:{type:"string",default:"[{}]"}},init:function(o){const e=JSON.parse(o.buildings),t=30,r=90,i=new Float32Array(e.length*r),n=new Float32Array(e.length*r),a=[];for(let l=0;l<e.length;++l){let s=e[l].x||0,u=e[l].z||0,p=o.elevation+(e[l].y||0),m=Math.max(e[l].xCoreSections||2,1),w=Math.max(e[l].xWingSections||0,0),d=Math.max(e[l].zCoreSections||2,1),f=Math.max(e[l].zWingSections||0,0),h=m*o.xProportion,y=w*o.xProportion,v=d*o.zProportion,x=f*o.zProportion,P=p+(e[l].ySections||1)*o.yProportion;i.set([s,p,u],l*r+0),i.set([s+y,p,u],l*r+3),i.set([s+y,P,u],l*r+6),i.set([s,P,u],l*r+9),n.set([0,0,1,0,0,1,0,0,1,0,0,1],l*r+0),a.push(l*t+0,l*t+1,l*t+2,l*t+2,l*t+3,l*t+0),i.set([s+y,p,u],l*r+12),i.set([s+y,p,u-v],l*r+15),i.set([s+y,P,u-v],l*r+18),i.set([s+y,P,u],l*r+21),n.set([1,0,0,1,0,0,1,0,0,1,0,0],l*r+12),a.push(l*t+4,l*t+5,l*t+6,l*t+6,l*t+7,l*t+4),i.set([s+y,p,u-v],l*r+24),i.set([s-h,p,u-v],l*r+27),i.set([s-h,P,u-v],l*r+30),i.set([s+y,P,u-v],l*r+33),n.set([0,0,-1,0,0,-1,0,0,-1,0,0,-1],l*r+24),a.push(l*t+8,l*t+9,l*t+10,l*t+10,l*t+11,l*t+5),i.set([s-h,p,u-v],l*r+36),i.set([s-h,p,u+x],l*r+39),i.set([s-h,P,u+x],l*r+42),i.set([s-h,P,u-v],l*r+45),n.set([-1,0,0,-1,0,0,-1,0,0,-1,0,0],l*r+36),a.push(l*t+12,l*t+13,l*t+14,l*t+14,l*t+15,l*t+12),i.set([s-h,p,u+x],l*r+48),i.set([s,p,u+x],l*r+51),i.set([s,P,u+x],l*r+54),i.set([s-h,P,u+x],l*r+57),n.set([0,0,1,0,0,1,0,0,1,0,0,1],l*r+48),a.push(l*t+16,l*t+17,l*t+18,l*t+18,l*t+19,l*t+16),i.set([s,p,u+x],l*r+60),i.set([s,p,u],l*r+63),i.set([s,P,u],l*r+66),i.set([s,P,u+x],l*r+69),n.set([1,0,0,1,0,0,1,0,0,1,0,0],l*r+60),a.push(l*t+20,l*t+21,l*t+22,l*t+22,l*t+23,l*t+20),i.set([s,P,u],l*r+72),i.set([s+y,P,u],l*r+75),i.set([s+y,P,u-v],l*r+78),i.set([s-h,P,u-v],l*r+81),i.set([s-h,P,u+x],l*r+84),i.set([s,P,u+x],l*r+87),n.set([0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0],l*r+72),a.push(l*t+24,l*t+25,l*t+26,l*t+26,l*t+27,l*t+24,l*t+27,l*t+28,l*t+24,l*t+28,l*t+29,l*t+24)}this.geometry=new THREE.BufferGeometry,this.geometry.setAttribute("position",new THREE.BufferAttribute(i,3)),this.geometry.setAttribute("normal",new THREE.BufferAttribute(n,3)),this.geometry.setIndex(a),this.geometry.computeBoundingBox()}}),AFRAME.registerPrimitive("a-shader-buildings",{defaultComponents:{geometry:{primitive:"ell",buildings:[]},material:{shader:"buildings"}},mappings:{"elevation-geometry":"geometry.elevation","x-proportion-geometry":"geometry.xProportion","z-proportion-geometry":"geometry.zProportion","y-proportion-geometry":"geometry.yProportion",buildings:"geometry.buildings","elevation-material":"material.elevation","x-proportion-material":"material.xProportion","z-proportion-material":"material.zProportion","y-proportion-material":"material.yProportion","window-width":"material.windowWidth","window-height":"material.windowHeight","wall-src":"material.wallSrc","wall-zoom":"material.wallZoom","wall-color":"material.wallColor","window-color":"material.windowColor","sun-position":"material.sunPosition"}})})()})();